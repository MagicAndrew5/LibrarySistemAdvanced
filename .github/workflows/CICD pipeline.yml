name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  # === BACKEND BUILD ===
  build-backend:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DB_NAME }}
          MYSQL_USERNAME: ${{ secrets.MYSQL_DB_USERNAME }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_DB_PASSWORD }}
        ports:
          - '3306:3306'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Wait for MySQL
        run: |
          echo "Waiting for MySQL..."
          for i in {1..30}; do
            if mysql ping -h 127.0.0.1 --user="${{ secrets.MYSQL_DB_USERNAME }}" --password="${{ secrets.MYSQL_DB_PASSWORD }}" --silent; then
              echo "MySQL is ready!"
              exit 0
            fi
            echo "Still waiting ($i)..."
            sleep 2
          done
        
      - name: Build & Test Backend
        working-directory: LibrarySystem-Backend
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/library?useSSL=false&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true
          SPRING_DATASOURCE_USERNAME: ${{ secrets.MYSQL_DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_DB_PASSWORD }}
          SPRING_JPA_HIBERNATE_DDL_AUTO: update
        run: ./mvnw clean verify -Dmaven.test.failure.ignore=true

      - name: Upload Surefire Reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: LibrarySystem-Backend/target/surefire-reports

  # === CHECKSTYlE ===
  checkstyle:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - uses: actions/checkout@v4
      - name: Run Checkstyle
        working-directory: LibrarySystem-Backend
        run: ./mvnw checkstyle:checkstyle

  # === SPOTBUGS ===
  spotbugs:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - uses: actions/checkout@v4
      - name: Run Spotbugs
        working-directory: LibrarySystem-Backend
        run: ./mvnw spotbugs:spotbugs
        # run: ./mvnw spotbugs:check

      - name: List Target Directory (Debug)
        working-directory: LibrarySystem-Backend
        run: ls -la target/
  
      - name: Upload SpotBugs Report
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs.html
          path: LibrarySystem-Backend/target/spotbugs-reports/

  # === SONARQUBE ===
  sonar:
    runs-on: ubuntu-latest
    needs: [build-backend, spotbugs]
    steps:
      - uses: actions/checkout@v4

      #- name: Download SpotBugs Report
      #  uses: actions/download-artifact@v4
      #  with:
      #    name: spotbugs.html
      #    path: LibrarySystem-Backend/target/

      - name: Run SonarQube Analysis
        working-directory: LibrarySystem-Backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./mvnw -B verify sonar:sonar \
            -Dsonar.projectKey=${{ secrets.SONAR_KEY_PROJECT }} \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dmaven.test.skip=true \
            -Dsonar.java.spotbugs.reportPaths=target/spotbugs-reports/spotbugs.xml \
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-report/checkstyle-result.html
            
  # === JACOCO TEST ===
  coverage:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - uses: actions/checkout@v4
      - name: Generate Coverage Report
        working-directory: LibrarySystem-Backend
        run: ./mvnw jacoco:report

  # === FRONTEND ===
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Frontend Dependencies
        working-directory: LibrarySystem-Frontend
        run: npm ci

      - name: Run Frontend Tests
        working-directory: LibrarySystem-Frontend
        run: npm run test -- --watch=false --browsers=ChromeHeadless

      - name: Build Frontend
        working-directory: LibrarySystem-Frontend
        run: npm run build

      - name: Run ESLint
        working-directory: LibrarySystem-Frontend
        run: npm run lint

  # === DOCKER BUILD & PUSH ===
  docker:
    runs-on: ubuntu-latest
    needs: [frontend, build-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Backend Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/library-backend ./LibrarySystem-Backend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/library-backend

      - name: Build & Push Frontend Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/library-frontend ./LibrarySystem-Frontend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/library-frontend
