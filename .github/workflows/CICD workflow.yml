# Nome del workflow GitHub Actions
name: CI/CD Pipeline

# Trigger: esegue il workflow su push o pull request verso il branch main
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  # === JOB BACKEND ===
  backend:
    runs-on: ubuntu-latest  # Runner GitHub ospitato su Ubuntu

    services:
      # Servizio MySQL che verrà avviato prima degli step
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DB_NAME }}  # Nome database
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_DB_PASSWORD }}  # Password root
        ports:
          - '3306:3306'  # Espone la porta MySQL

    steps:
      # 1. Clona il repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Imposta Java 17 (necessario per il backend Spring Boot)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Aspetta che MySQL sia pronto prima di procedere
      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -u ${{ secrets.MYSQL_DB_USERNAME }} -p${{ secrets.MYSQL_DB_PASSWORD }} --silent; then
              echo "MySQL is ready!"
              exit 0
            fi
            echo "Still waiting ($i)..."
            sleep 2
          done

      # 4. Compila e testa il backend con Maven
      - name: Build and Test Backend
        working-directory: LibrarySystem-Backend
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/library?useSSL=false&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true
          SPRING_DATASOURCE_USERNAME: ${{ secrets.MYSQL_DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_DB_PASSWORD }}
          SPRING_JPA_HIBERNATE_DDL_AUTO: update
        run: |
          ./mvnw clean install
          if [ $? -ne 0 ]; then
            echo "=== TEST FAILURE REPORTS ==="
            find target/surefire-reports -name "*.txt" -exec cat {} \;
            exit 1
          fi

      # 5. Esegue Checkstyle per la qualità del codice Java
      - name: Run Checkstyle
        working-directory: LibrarySystem-Backend
        run: ./mvnw checkstyle:checkstyle

      # 6. Esegue SpotBugs per analisi statica
      - name: Run Spotbugs
        working-directory: LibrarySystem-Backend
        run: ./mvnw spotbugs:check

      # 7. Esegue SonarQube Scanner per analisi qualità completa
      - name: Run SonarQube Analysis
        working-directory: LibrarySystem-Backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: #mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            #-Dsonar.projectKey=MagicAndrew5_LibrarySistemAdvanced_3f088236-e914-4809-8bb9-bb9eda509d63 \
           # -Dsonar.projectName='LibrarySistemAdvanced'
          
          
          ./mvnw -B verify sonar:sonar \
          -Dsonar.projectKey=${{ secrets.SONAR_KEY_PROJECT }} \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
          -Dsonar.java.spotbugs.reportPaths=target/spotbugs/spotbugs.xml

          


       
      # 7. Genera report di copertura codice con JaCoCo
      - name: Generate Coverage Report
        working-directory: LibrarySystem-Backend
        run: ./mvnw jacoco:report


  # === JOB FRONTEND ===
  frontend:
    runs-on: ubuntu-latest

    steps:
      # 1. Clona il repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Imposta Node.js 18
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # 3. Installa le dipendenze Angular
      - name: Install Frontend Dependencies
        working-directory: LibrarySystem-Frontend
        run: npm ci

      # 4. Esegue i test Angular headless
      - name: Run Frontend Tests
        working-directory: LibrarySystem-Frontend
        run: npm run test -- --watch=false --browsers=ChromeHeadless

      # 5. Compila il progetto Angular
      - name: Build Frontend
        working-directory: LibrarySystem-Frontend
        run: npm run build

      # 6. Esegue linting del codice Angular
      - name: Run ESLint
        working-directory: LibrarySystem-Frontend
        run: npm run lint
